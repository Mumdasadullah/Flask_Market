
(.venv) C:\Users\asadu\OneDrive\Documents\Python_Flask\FlaskMarket>python
Python 3.12.1 (tags/v3.12.1:2305ca5, Dec  7 2023, 22:03:25) [MSC v.1937 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> from market import app, db
>>> app.app_context().push()
>>> db.drop_all()
>>> db.create_all()
>>> from market.models import User,Item
>>> u1 = User(username='abc', password_hash='abc123', email_address='abc@abc.com')
>>> db.session.add(u1)
>>> db.session.commit()
>>> User.query.all()
[<User 1>]
>>> i1 = Item(name='IPhone 10', description='description', barcode='124132323232', price=800)
>>> i2 = Item(name='Laptop', description='description of Laptop', barcode='913872389809', price=950)
>>> db.session.add(i1)
>>> db.session.add(i2)
>>> db.session.commit()
>>> Item.query.all()
[Item IPhone 10, Item Laptop]
>>> item1 = Item.query.filter_by('IPhone 10')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: Query.filter_by() takes 1 positional argument but 2 were given
>>> item1 = Item.query.filter_by(name='IPhone 10')
>>> item1
<flask_sqlalchemy.query.Query object at 0x000001D46E5E6900>
>>> item1 = Item.query.filter_by(name='IPhone 10').first()
>>> item1
Item IPhone 10
>>> item1.owner
>>> item1.owner = User.query.filter_by(username='abc').first()
>>> db.session.add(item1)
>>> db.session.commit()
Traceback (most recent call last):
  File "C:\Users\asadu\OneDrive\Documents\Python_Flask\FlaskMarket\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1969, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\asadu\OneDrive\Documents\Python_Flask\FlaskMarket\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 922, in do_execute
    cursor.execute(statement, parameters)
sqlite3.ProgrammingError: Error binding parameter 1: type 'User' is not supported

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "C:\Users\asadu\OneDrive\Documents\Python_Flask\FlaskMarket\.venv\Lib\site-packages\sqlalchemy\orm\scoping.py", line 598, in commit
    return self._proxied.commit()
           ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\asadu\OneDrive\Documents\Python_Flask\FlaskMarket\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 1969, in commit
    trans.commit(_to_root=True)
  File "<string>", line 2, in commit
  File "C:\Users\asadu\OneDrive\Documents\Python_Flask\FlaskMarket\.venv\Lib\site-packages\sqlalchemy\orm\state_changes.py", line 139, in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\asadu\OneDrive\Documents\Python_Flask\FlaskMarket\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 1256, in commit
    self._prepare_impl()
  File "<string>", line 2, in _prepare_impl
  File "C:\Users\asadu\OneDrive\Documents\Python_Flask\FlaskMarket\.venv\Lib\site-packages\sqlalchemy\orm\state_changes.py", line 139, in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\asadu\OneDrive\Documents\Python_Flask\FlaskMarket\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 1231, in _prepare_impl
    self.session.flush()
  File "C:\Users\asadu\OneDrive\Documents\Python_Flask\FlaskMarket\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 4312, in flush
    self._flush(objects)
  File "C:\Users\asadu\OneDrive\Documents\Python_Flask\FlaskMarket\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 4447, in _flush
    with util.safe_reraise():
  File "C:\Users\asadu\OneDrive\Documents\Python_Flask\FlaskMarket\.venv\Lib\site-packages\sqlalchemy\util\langhelpers.py", line 146, in __exit__
    raise exc_value.with_traceback(exc_tb)
  File "C:\Users\asadu\OneDrive\Documents\Python_Flask\FlaskMarket\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 4408, in _flush
    flush_context.execute()
  File "C:\Users\asadu\OneDrive\Documents\Python_Flask\FlaskMarket\.venv\Lib\site-packages\sqlalchemy\orm\unitofwork.py", line 466, in execute
    rec.execute(self)
  File "C:\Users\asadu\OneDrive\Documents\Python_Flask\FlaskMarket\.venv\Lib\site-packages\sqlalchemy\orm\unitofwork.py", line 642, in execute
    util.preloaded.orm_persistence.save_obj(
  File "C:\Users\asadu\OneDrive\Documents\Python_Flask\FlaskMarket\.venv\Lib\site-packages\sqlalchemy\orm\persistence.py", line 85, in save_obj
    _emit_update_statements(
  File "C:\Users\asadu\OneDrive\Documents\Python_Flask\FlaskMarket\.venv\Lib\site-packages\sqlalchemy\orm\persistence.py", line 910, in _emit_update_statements
    c = connection.execute(
        ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\asadu\OneDrive\Documents\Python_Flask\FlaskMarket\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
    return meth(
           ^^^^^
  File "C:\Users\asadu\OneDrive\Documents\Python_Flask\FlaskMarket\.venv\Lib\site-packages\sqlalchemy\sql\elements.py", line 517, in _execute_on_connection
    return connection._execute_clauseelement(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\asadu\OneDrive\Documents\Python_Flask\FlaskMarket\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1639, in _execute_clauseelement
    ret = self._execute_context(
          ^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\asadu\OneDrive\Documents\Python_Flask\FlaskMarket\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1848, in _execute_context
    return self._exec_single_context(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\asadu\OneDrive\Documents\Python_Flask\FlaskMarket\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1988, in _exec_single_context
    self._handle_dbapi_exception(
  File "C:\Users\asadu\OneDrive\Documents\Python_Flask\FlaskMarket\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 2344, in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
  File "C:\Users\asadu\OneDrive\Documents\Python_Flask\FlaskMarket\.venv\Lib\site-packages\sqlalchemy\engine\base.py", line 1969, in _exec_single_context
    self.dialect.do_execute(
  File "C:\Users\asadu\OneDrive\Documents\Python_Flask\FlaskMarket\.venv\Lib\site-packages\sqlalchemy\engine\default.py", line 922, in do_execute
    cursor.execute(statement, parameters)
sqlalchemy.exc.ProgrammingError: (sqlite3.ProgrammingError) Error binding parameter 1: type 'User' is not supported
[SQL: UPDATE item SET owner=? WHERE item.id = ?]
[parameters: (<User 1>, 1)]
(Background on this error at: https://sqlalche.me/e/20/f405)
>>> item1.owner
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "C:\Users\asadu\OneDrive\Documents\Python_Flask\FlaskMarket\.venv\Lib\site-packages\sqlalchemy\orm\attributes.py", line 566, in __get__
    return self.impl.get(state, dict_)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\asadu\OneDrive\Documents\Python_Flask\FlaskMarket\.venv\Lib\site-packages\sqlalchemy\orm\attributes.py", line 1086, in get
    value = self._fire_loader_callables(state, key, passive)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\asadu\OneDrive\Documents\Python_Flask\FlaskMarket\.venv\Lib\site-packages\sqlalchemy\orm\attributes.py", line 1116, in _fire_loader_callables
    return state._load_expired(state, passive)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\asadu\OneDrive\Documents\Python_Flask\FlaskMarket\.venv\Lib\site-packages\sqlalchemy\orm\state.py", line 798, in _load_expired
    self.manager.expired_attribute_loader(self, toload, passive)
  File "C:\Users\asadu\OneDrive\Documents\Python_Flask\FlaskMarket\.venv\Lib\site-packages\sqlalchemy\orm\loading.py", line 1651, in load_scalar_attributes
    result = load_on_ident(
             ^^^^^^^^^^^^^^
  File "C:\Users\asadu\OneDrive\Documents\Python_Flask\FlaskMarket\.venv\Lib\site-packages\sqlalchemy\orm\loading.py", line 507, in load_on_ident
    return load_on_pk_identity(
           ^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\asadu\OneDrive\Documents\Python_Flask\FlaskMarket\.venv\Lib\site-packages\sqlalchemy\orm\loading.py", line 692, in load_on_pk_identity
    session.execute(
  File "C:\Users\asadu\OneDrive\Documents\Python_Flask\FlaskMarket\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2308, in execute
    return self._execute_internal(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\asadu\OneDrive\Documents\Python_Flask\FlaskMarket\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2180, in _execute_internal
    conn = self._connection_for_bind(bind)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\asadu\OneDrive\Documents\Python_Flask\FlaskMarket\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 2047, in _connection_for_bind
    return trans._connection_for_bind(engine, execution_options)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "<string>", line 2, in _connection_for_bind
  File "C:\Users\asadu\OneDrive\Documents\Python_Flask\FlaskMarket\.venv\Lib\site-packages\sqlalchemy\orm\state_changes.py", line 103, in _go
    self._raise_for_prerequisite_state(fn.__name__, current_state)
  File "C:\Users\asadu\OneDrive\Documents\Python_Flask\FlaskMarket\.venv\Lib\site-packages\sqlalchemy\orm\session.py", line 929, in _raise_for_prerequisite_state
    raise sa_exc.PendingRollbackError(
sqlalchemy.exc.PendingRollbackError: This Session's transaction has been rolled back due to a previous exception during flush. To begin a new transaction with this Session, first issue Session.rollback(). Original exception was: (sqlite3.ProgrammingError) Error binding parameter 1: type 'User' is not supported
[SQL: UPDATE item SET owner=? WHERE item.id = ?]
[parameters: (<User 1>, 1)]
(Background on this error at: https://sqlalche.me/e/20/f405) (Background on this error at: https://sqlalche.me/e/20/7s2a)
>>> db.session.rollback()
>>> item1.owner = User.query.filter_by(username='abc').first().id
>>>
>>> db.session.add(item1)
>>> db.session.commit()
>>> item1.owner
1
>>> i = Item.query.filter_by(name='IPhone 10').first()
>>> i.owned_user
<User 1>
>>>